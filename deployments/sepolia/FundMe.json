{
  "address": "0x2f01ae48bcF94E85D56652575002817dFb852876",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "donatersList",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "history",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeedAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x89d9fad7c6a1b23a29a5cb0dd195066a4c313f4f44719467681e8eface16896a",
  "receipt": {
    "to": null,
    "from": "0x687cD57BC79f1F77d76668ea1c5c531664C97CB9",
    "contractAddress": "0x2f01ae48bcF94E85D56652575002817dFb852876",
    "transactionIndex": 42,
    "gasUsed": "792298",
    "logsBloom": "0x
    "blockHash": "0xbbbfdf72c69ac5e94903d8d2b76e8ced92ad62480c9c5735a375d28cfe24a45f",
    "transactionHash": "0x89d9fad7c6a1b23a29a5cb0dd195066a4c313f4f44719467681e8eface16896a",
    "logs": [],
    "blockNumber": 5627383,
    "cumulativeGasUsed": "9875336",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x694aa1769357215de4fac081bf1f309adc325306"
  ],
  "numDeployments": 1,
  "solcInputHash": "123cd06f4ee23b2e57109e027722552f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"donatersList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"history\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeedAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0xfe4e8bb4861bb3860ba890ab91a3b818ec66e5a8f544fb608cfcb73f433472cd\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.24;\\n\\nimport \\\"./PriceConvertor.sol\\\";\\n\\ncontract FundMe {\\n    using PriceConvertor for uint256; // This means that all the functions in the PriceConverter library are available to call on any uint256. But they have to be \\\"internal functions\\\" *(very important)\\n\\n    address[] public donatersList;\\n    mapping(address => uint256) public history;\\n\\n    uint256 constant MIN_USD = (50 * 1e18); // constant --> those var which can be updated only once but has to initialized on declaration.\\n    address public immutable i_owner; // immutable --> those var which can be updated only once but can be initialized only inside constructor.\\n\\n    // both constant and immutable saves gas\\n\\n    address public priceFeedAddress;\\n\\n    constructor(address _priceFeedAddress) {\\n        // constructor will run instantly as the contract is deployed\\n        i_owner = msg.sender; // msg.sender at deployement will be the addess of the person who deployed the contract\\n        priceFeedAddress = _priceFeedAddress;\\n    }\\n\\n    function fund() public payable {\\n        // payable specifier for specifying that the we can send money through this function\\n        // require (if false, then execute this and revert)\\n        require(\\n            msg.value.priceConvertor(priceFeedAddress) >= MIN_USD,\\n            \\\"Bhai tu thora bkl hai kya?\\\"\\n        ); // msg.value --> returns how much \\\"value\\\" someone is sending through this function\\n        // the msg.value is considered as the first parameter that is passed in the priceConvertor function library\\n        donatersList.push(msg.sender);\\n        history[msg.sender] += msg.value;\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        for (uint256 i = 0; i < donatersList.length; i++) {\\n            history[donatersList[i]] = 0;\\n        }\\n\\n        donatersList = new address[](0);\\n\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(callSuccess, \\\"laure lag gaye bhai\\\");\\n    }\\n\\n    modifier onlyOwner() {\\n        // anytime the onlyOwner specifier will be used in a function, it will jump to here and first complete all task here then move back to its function\\n        require(i_owner == msg.sender, \\\"Tu owner hai kya laure?\\\");\\n        _; // move back to the fucntion and do the rest remaining in there\\n    }\\n\\n    receive() external payable {\\n        // if you pay the contract without any msg.data (calldata) then receive() will run\\n        fund();\\n    }\\n\\n    fallback() external payable {\\n        // if you pay the contract with some calldata but it does not point to any defined function in the contract, then fallback() will run\\n        fund();\\n    }\\n\\n    // $4025.19569965\\n}\\n\\n// 0x694AA1769357215DE4FAC081bf1f309aDC325306  --> contract address of ETH/USD\\n\\n// Contract can also hold funds in their contract address just like a wallet address\\n\\n/* What is Reverting?\\n    Undo any actions before, and send the remaining gas back */\\n\\n// Interface github --> https://github.com/smartcontractkit/chainlink/blob/master/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\\n\\n/*\\n    Ether is send to contract->\\n       \\n       Is msg.data empty?\\n            /    \\\\   \\n          yes     no\\n          /        \\\\\\n    receive() ?   fallback()   \\n      /   \\\\\\n    yes   no\\n    /       \\\\\\nreceive()   fallback()\\n\\n*/\\n\",\"keccak256\":\"0x8e70a2a11bec3df3620ee6abe317c7f00bdb6e7623042a3aa8729bce30e7dc99\",\"license\":\"MIT\"},\"contracts/PriceConvertor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.24;\\n\\nimport {AggregatorV3Interface} from \\\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConvertor {\\n    function getPrice(address _priceFeedAddress) public view returns (uint256) {\\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(\\n            _priceFeedAddress\\n        );\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\n        return uint256(price * 1e10);\\n    }\\n\\n    // The first var that gets passed to the function as a parameter is going to be the object that its called on itself\\n    function priceConvertor(\\n        uint256 _ethAmount,\\n        address _priceFeedAddress\\n    ) internal view returns (uint256) {\\n        // Libraries are only embedded into the contract if the library functions are internal.... so they must be internal. As we are calling this function in fundMe so this must be internal\\n        uint ethPrice = getPrice(_priceFeedAddress);\\n        uint ethAmountInUsd = (_ethAmount * ethPrice) / 1e18;\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0x4f6235fcc006a64a2a3e19932cfd3900e7fbb26a8515d6759402df04dc9349d7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051610e50380380610e5083398181016040528101906100329190610110565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061013d565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100dd826100b2565b9050919050565b6100ed816100d2565b81146100f857600080fd5b50565b60008151905061010a816100e4565b92915050565b600060208284031215610126576101256100ad565b5b6000610134848285016100fb565b91505092915050565b608051610cf161015f600039600081816102b701526105340152610cf16000f3fe6080604052600436106100595760003560e01c80633ccfd60b14610072578063931c7c6814610089578063ab076005146100c6578063b60d428814610103578063dba6335f1461010d578063e0abca0b1461013857610068565b3661006857610066610163565b005b610070610163565b005b34801561007e57600080fd5b5061008761029e565b005b34801561009557600080fd5b506100b060048036038101906100ab9190610759565b6104db565b6040516100bd919061079f565b60405180910390f35b3480156100d257600080fd5b506100ed60048036038101906100e891906107e6565b6104f3565b6040516100fa9190610822565b60405180910390f35b61010b610163565b005b34801561011957600080fd5b50610122610532565b60405161012f9190610822565b60405180910390f35b34801561014457600080fd5b5061014d610556565b60405161015a9190610822565b60405180910390f35b6802b5e3af16b18800006101a2600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461057c90919063ffffffff16565b10156101e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101da9061089a565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461029591906108e9565b92505081905550565b3373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff161461032c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161032390610969565b60405180910390fd5b60005b6000805490508110156103cb5760006001600080848154811061035557610354610989565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550808060010191505061032f565b50600067ffffffffffffffff8111156103e7576103e66109b8565b5b6040519080825280602002602001820160405280156104155781602001602082028036833780820191505090505b506000908051906020019061042b92919061064f565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161045290610a18565b60006040518083038185875af1925050503d806000811461048f576040519150601f19603f3d011682016040523d82523d6000602084013e610494565b606091505b50509050806104d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104cf90610a79565b60405180910390fd5b50565b60016020528060005260406000206000915090505481565b6000818154811061050357600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080610588836105b8565b90506000670de0b6b3a764000082866105a19190610a99565b6105ab9190610b0a565b9050809250505092915050565b60008082905060008173ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa15801561060b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062f9190610bc8565b5050509150506402540be400816106469190610c43565b92505050919050565b8280548282559060005260206000209081019282156106c8579160200282015b828111156106c75782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061066f565b5b5090506106d591906106d9565b5090565b5b808211156106f25760008160009055506001016106da565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610726826106fb565b9050919050565b6107368161071b565b811461074157600080fd5b50565b6000813590506107538161072d565b92915050565b60006020828403121561076f5761076e6106f6565b5b600061077d84828501610744565b91505092915050565b6000819050919050565b61079981610786565b82525050565b60006020820190506107b46000830184610790565b92915050565b6107c381610786565b81146107ce57600080fd5b50565b6000813590506107e0816107ba565b92915050565b6000602082840312156107fc576107fb6106f6565b5b600061080a848285016107d1565b91505092915050565b61081c8161071b565b82525050565b60006020820190506108376000830184610813565b92915050565b600082825260208201905092915050565b7f426861692074752074686f726120626b6c20686169206b79613f000000000000600082015250565b6000610884601a8361083d565b915061088f8261084e565b602082019050919050565b600060208201905081810360008301526108b381610877565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006108f482610786565b91506108ff83610786565b9250828201905080821115610917576109166108ba565b5b92915050565b7f5475206f776e657220686169206b7961206c617572653f000000000000000000600082015250565b600061095360178361083d565b915061095e8261091d565b602082019050919050565b6000602082019050818103600083015261098281610946565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610a026000836109e7565b9150610a0d826109f2565b600082019050919050565b6000610a23826109f5565b9150819050919050565b7f6c61757265206c61672067617965206268616900000000000000000000000000600082015250565b6000610a6360138361083d565b9150610a6e82610a2d565b602082019050919050565b60006020820190508181036000830152610a9281610a56565b9050919050565b6000610aa482610786565b9150610aaf83610786565b9250828202610abd81610786565b91508282048414831517610ad457610ad36108ba565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610b1582610786565b9150610b2083610786565b925082610b3057610b2f610adb565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610b5a81610b3b565b8114610b6557600080fd5b50565b600081519050610b7781610b51565b92915050565b6000819050919050565b610b9081610b7d565b8114610b9b57600080fd5b50565b600081519050610bad81610b87565b92915050565b600081519050610bc2816107ba565b92915050565b600080600080600060a08688031215610be457610be36106f6565b5b6000610bf288828901610b68565b9550506020610c0388828901610b9e565b9450506040610c1488828901610bb3565b9350506060610c2588828901610bb3565b9250506080610c3688828901610b68565b9150509295509295909350565b6000610c4e82610b7d565b9150610c5983610b7d565b9250828202610c6781610b7d565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615610c9f57610c9e6108ba565b5b8282058414831517610cb457610cb36108ba565b5b509291505056fea26469706673582212203f315e00ff8a7315322a14dd65687cd0c1ea86a7af59d19f0d570976f7b3994364736f6c63430008180033",
  "deployedBytecode": "0x6080604052600436106100595760003560e01c80633ccfd60b14610072578063931c7c6814610089578063ab076005146100c6578063b60d428814610103578063dba6335f1461010d578063e0abca0b1461013857610068565b3661006857610066610163565b005b610070610163565b005b34801561007e57600080fd5b5061008761029e565b005b34801561009557600080fd5b506100b060048036038101906100ab9190610759565b6104db565b6040516100bd919061079f565b60405180910390f35b3480156100d257600080fd5b506100ed60048036038101906100e891906107e6565b6104f3565b6040516100fa9190610822565b60405180910390f35b61010b610163565b005b34801561011957600080fd5b50610122610532565b60405161012f9190610822565b60405180910390f35b34801561014457600080fd5b5061014d610556565b60405161015a9190610822565b60405180910390f35b6802b5e3af16b18800006101a2600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461057c90919063ffffffff16565b10156101e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101da9061089a565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461029591906108e9565b92505081905550565b3373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff161461032c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161032390610969565b60405180910390fd5b60005b6000805490508110156103cb5760006001600080848154811061035557610354610989565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550808060010191505061032f565b50600067ffffffffffffffff8111156103e7576103e66109b8565b5b6040519080825280602002602001820160405280156104155781602001602082028036833780820191505090505b506000908051906020019061042b92919061064f565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161045290610a18565b60006040518083038185875af1925050503d806000811461048f576040519150601f19603f3d011682016040523d82523d6000602084013e610494565b606091505b50509050806104d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104cf90610a79565b60405180910390fd5b50565b60016020528060005260406000206000915090505481565b6000818154811061050357600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080610588836105b8565b90506000670de0b6b3a764000082866105a19190610a99565b6105ab9190610b0a565b9050809250505092915050565b60008082905060008173ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa15801561060b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062f9190610bc8565b5050509150506402540be400816106469190610c43565b92505050919050565b8280548282559060005260206000209081019282156106c8579160200282015b828111156106c75782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061066f565b5b5090506106d591906106d9565b5090565b5b808211156106f25760008160009055506001016106da565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610726826106fb565b9050919050565b6107368161071b565b811461074157600080fd5b50565b6000813590506107538161072d565b92915050565b60006020828403121561076f5761076e6106f6565b5b600061077d84828501610744565b91505092915050565b6000819050919050565b61079981610786565b82525050565b60006020820190506107b46000830184610790565b92915050565b6107c381610786565b81146107ce57600080fd5b50565b6000813590506107e0816107ba565b92915050565b6000602082840312156107fc576107fb6106f6565b5b600061080a848285016107d1565b91505092915050565b61081c8161071b565b82525050565b60006020820190506108376000830184610813565b92915050565b600082825260208201905092915050565b7f426861692074752074686f726120626b6c20686169206b79613f000000000000600082015250565b6000610884601a8361083d565b915061088f8261084e565b602082019050919050565b600060208201905081810360008301526108b381610877565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006108f482610786565b91506108ff83610786565b9250828201905080821115610917576109166108ba565b5b92915050565b7f5475206f776e657220686169206b7961206c617572653f000000000000000000600082015250565b600061095360178361083d565b915061095e8261091d565b602082019050919050565b6000602082019050818103600083015261098281610946565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610a026000836109e7565b9150610a0d826109f2565b600082019050919050565b6000610a23826109f5565b9150819050919050565b7f6c61757265206c61672067617965206268616900000000000000000000000000600082015250565b6000610a6360138361083d565b9150610a6e82610a2d565b602082019050919050565b60006020820190508181036000830152610a9281610a56565b9050919050565b6000610aa482610786565b9150610aaf83610786565b9250828202610abd81610786565b91508282048414831517610ad457610ad36108ba565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610b1582610786565b9150610b2083610786565b925082610b3057610b2f610adb565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610b5a81610b3b565b8114610b6557600080fd5b50565b600081519050610b7781610b51565b92915050565b6000819050919050565b610b9081610b7d565b8114610b9b57600080fd5b50565b600081519050610bad81610b87565b92915050565b600081519050610bc2816107ba565b92915050565b600080600080600060a08688031215610be457610be36106f6565b5b6000610bf288828901610b68565b9550506020610c0388828901610b9e565b9450506040610c1488828901610bb3565b9350506060610c2588828901610bb3565b9250506080610c3688828901610b68565b9150509295509295909350565b6000610c4e82610b7d565b9150610c5983610b7d565b9250828202610c6781610b7d565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615610c9f57610c9e6108ba565b5b8282058414831517610cb457610cb36108ba565b5b509291505056fea26469706673582212203f315e00ff8a7315322a14dd65687cd0c1ea86a7af59d19f0d570976f7b3994364736f6c63430008180033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 319,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "donatersList",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 323,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "history",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 333,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "priceFeedAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}